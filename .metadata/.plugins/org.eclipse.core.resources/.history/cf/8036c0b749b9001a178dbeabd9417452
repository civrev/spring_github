package com.cwatts.demo.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.cwatts.demo.model.Technology;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
public class RepositoryControllerTest {

	@Autowired
	MockMvc mvc;
	
	ObjectMapper objectMapper;
	
	public RepositoryControllerTest() {
		
	}
	
	@Test
	void create() throws Exception {
		String baseUrl = "/technology"; 
		Technology tech = new Technology();
		tech.setId(1L);
		tech.setTitle("foo");
		// should not exist
		mvc.perform(get(baseUrl + "/{id}", tech.getId()))
			.andDo(print())
			.andExpect(status().isNotFound());
		
		mvc.perform(put(baseUrl)
					.contentType(MediaType.APPLICATION_JSON)
					.accept(MediaType.APPLICATION_JSON)
					.content());
		
		mvc.perform(get(baseUrl + "/{id}", tech.getId()))
		.andDo(print())
		.andExpect(status().isOk());
	}
	
}
